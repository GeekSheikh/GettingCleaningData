install.packages('ggplot2')
install.packages('rODBC')
install.packages('RODBC')
install.packages('ggvis')
find.package("devtools")
install.packages("devtools")
find_rtools()
version()
find_rtools()
setwd("C:/Dev/git/coursera/GettingCleaningData")
tmp <- read.csv("data/getdata-data-ss06hid.csv")
View(tmp)
names(tmp)
strsplit(names(tmp), "wgtp")
strsplit(names(tmp), "wgtp")[123]
tmp <- read.csv("data/getdata-data-GDP.csv")
View(tmp)
?read.csv
tmp <- read.csv("data/getdata-data-GDP.csv", skip = 4, nrows = 190 )
View(tmp)
View(tmp)
vgdp <- tmp[,"X.4"]
head(vgdp)
vgdp <- as.numeric(tmp[,"X.4"])
summary(vgdp)
vgdp <- as.character(tmp[,"X.4"])
tmp2 <- as.numeric(gsub(",","",vgdp))
meantmp2 <- mean(tmp2)
View(tmp)
grep("^United",tmp2[,"X.3"])
grep("^United",tmp[,"X.3"])
cntr <- read.csv("data/getdata-data-EDSTATS_Country.csv")
View(cntr)
?merge
tmpcntry <- merge(tmp[,1], cntr[,1])
View(tmpcntry)
?setNames
setNames(tmp = c("CountryCode", 1:9))
setNames(tmp = c("CountryCode", paste0(1:9))
)
setNames(tmp = c("CountryCode", as.character(1:9)))
c("CountryCode", as.character(1:9))
naems <- c("CountryCode", as.character(1:9))
setNames(tmp = naems()
)
setNames(tmp = naems)
names(tmp) <- naems
View(tmp)
merge(tmp,cntr)
tmpcntry <- merge(tmp,cntr)
View(tmpcntry)
?grep
grep("June", tmpcntry[,"Special.Notes"])
count(grep("June", tmpcntry[,"Special.Notes"]))
j <- grep("June", tmpcntry[,"Special.Notes"])
j <- grep("june", to.lower(tmpcntry[,"Special.Notes"]))
j <- grep("june", tolower(tmpcntry[,"Special.Notes"]))
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(amzn)
j <- grep("2012", amzn[,1])
j <- grep("2012", amzn[,"row.names"])
str(amzn[1])
install.packages("lubridate")
library(lubridate)
d <- ymd(as.character(row.names(amzn)))
row.names(amzn)
?row.names
amzn[,1]
head(amzn[,1])
index(amzn)
d <- ymd(as.character(index(amzn)))
head(d)
d1 <- year(d) == 2012
d2 <- d2
d2 <- d1[TRUE]
sum(d1)
w <- wday(ymd(as.character(index(amzn))))
w <- wday(ymd(as.character(index(amzn))), label=T)
head(w)
sum(w["Mon"])
sum(w["Mon"])
head(w)
w <- data.frame(index(amzn), wday(ymd(as.character(index(amzn))), label=T))
View(w)
w[2 == "Mon"]
w <- data.frame(d = index(amzn), wd = wday(ymd(as.character(index(amzn))), label=T))
View(w)
w["wd" == "Mon",]
w[w$wd=="Mon"]
w[w$wd=="Mon",]
w2 = w[w$wd=="Mon",]
w2 = w[w$wd=="Mon" & year(ymd(w$d)) == 2012,]
View(`w2`)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
crant
cran
?select
select(cran,ip_id,package,contry)
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
print(cran)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(5:20))
select(cran, -(5:20))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran,country == "IN" | country == "US")
filte(cran, (X:size) > 100500 & r_os == "linux-gnu")
filter(cran, (X:size) > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, (X:size):ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran2, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarize(mean(size))
summarize(mean(by_package$size))
summarize(by_package)
summarize(by_package, mean(size))
submit()
?n
submit()
?n_district
pack_sum <- summarize(by_package,
count = n(),
unique = n_district(ip_id),
countries = n_district(country),
avg_bytes = mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = .99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit*()
submit()
submit()
submit()
View(result3)
cran %>% select() %>% print
cran %>%
select(ip_id, country, package, size) %>%
print()
submit*()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, sex_class, value, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, into = c("sex", "class"))
submit()
student3
students3
submit()
?gather
submit()
submit()
submit()
students3
submit()
submit()
submit()
reset()
students3
submit()
reset()
submit()
?spread
submit()
submit()
submit()
submit()
students3
students3 %>%
gather(class,grade,class1:class5,na.rm = TRUE) %>%
print
submit()
df <- data.frame(x = c("a", "b"), y = c(3, 4), z = c(5, 6))
df
df %>% spread(x,y)
submit()
submit()
extract_numeric("class5")
submit()
students4
submit()
?unique
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
?separate
submit()
submit()
submit()
submit()
sat
tmp<- select(-contains("total"))
tmp<- select(sat,-contains("total"))
tmp
gather(tmp, part_sex, 1:7, -score_range)
gather(tmp, part_sex, score_range:write_fem, -score_range)
gather(tmp, part_sex, count, -score_range)
submit()
submit()
